// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: book.proto

#ifndef PROTOBUF_book_2eproto__INCLUDED
#define PROTOBUF_book_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class AddrBook;
class AddrBookDefaultTypeInternal;
extern AddrBookDefaultTypeInternal _AddrBook_default_instance_;
class Person;
class PersonDefaultTypeInternal;
extern PersonDefaultTypeInternal _Person_default_instance_;

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_book_2eproto();
void protobuf_InitDefaults_book_2eproto();

enum Person_Score {
  Person_Score_GOOD = 0,
  Person_Score_NORMAL = 1,
  Person_Score_BAD = 2,
  Person_Score_Person_Score_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Person_Score_Person_Score_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Person_Score_IsValid(int value);
const Person_Score Person_Score_Score_MIN = Person_Score_GOOD;
const Person_Score Person_Score_Score_MAX = Person_Score_BAD;
const int Person_Score_Score_ARRAYSIZE = Person_Score_Score_MAX + 1;

const ::google::protobuf::EnumDescriptor* Person_Score_descriptor();
inline const ::std::string& Person_Score_Name(Person_Score value) {
  return ::google::protobuf::internal::NameOfEnum(
    Person_Score_descriptor(), value);
}
inline bool Person_Score_Parse(
    const ::std::string& name, Person_Score* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Person_Score>(
    Person_Score_descriptor(), name, value);
}
// ===================================================================

class Person : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Person) */ {
 public:
  Person();
  virtual ~Person();

  Person(const Person& from);

  inline Person& operator=(const Person& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Person& default_instance();

  static inline const Person* internal_default_instance() {
    return reinterpret_cast<const Person*>(
               &_Person_default_instance_);
  }

  void Swap(Person* other);

  // implements Message ----------------------------------------------

  inline Person* New() const PROTOBUF_FINAL { return New(NULL); }

  Person* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Person& from);
  void MergeFrom(const Person& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Person* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Person_Score Score;
  static const Score GOOD =
    Person_Score_GOOD;
  static const Score NORMAL =
    Person_Score_NORMAL;
  static const Score BAD =
    Person_Score_BAD;
  static inline bool Score_IsValid(int value) {
    return Person_Score_IsValid(value);
  }
  static const Score Score_MIN =
    Person_Score_Score_MIN;
  static const Score Score_MAX =
    Person_Score_Score_MAX;
  static const int Score_ARRAYSIZE =
    Person_Score_Score_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Score_descriptor() {
    return Person_Score_descriptor();
  }
  static inline const ::std::string& Score_Name(Score value) {
    return Person_Score_Name(value);
  }
  static inline bool Score_Parse(const ::std::string& name,
      Score* value) {
    return Person_Score_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 id = 2;
  void clear_id();
  static const int kIdFieldNumber = 2;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 result_per_page = 3;
  void clear_result_per_page();
  static const int kResultPerPageFieldNumber = 3;
  ::google::protobuf::int32 result_per_page() const;
  void set_result_per_page(::google::protobuf::int32 value);

  // .Person.Score score = 4;
  void clear_score();
  static const int kScoreFieldNumber = 4;
  ::Person_Score score() const;
  void set_score(::Person_Score value);

  // string phone = 5;
  void clear_phone();
  static const int kPhoneFieldNumber = 5;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  // @@protoc_insertion_point(class_scope:Person)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr phone_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 result_per_page_;
  int score_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_book_2eproto_impl();
  friend void  protobuf_AddDesc_book_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_book_2eproto();
  friend void protobuf_ShutdownFile_book_2eproto();

};
// -------------------------------------------------------------------

class AddrBook : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:AddrBook) */ {
 public:
  AddrBook();
  virtual ~AddrBook();

  AddrBook(const AddrBook& from);

  inline AddrBook& operator=(const AddrBook& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddrBook& default_instance();

  static inline const AddrBook* internal_default_instance() {
    return reinterpret_cast<const AddrBook*>(
               &_AddrBook_default_instance_);
  }

  void Swap(AddrBook* other);

  // implements Message ----------------------------------------------

  inline AddrBook* New() const PROTOBUF_FINAL { return New(NULL); }

  AddrBook* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddrBook& from);
  void MergeFrom(const AddrBook& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddrBook* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Person people = 1;
  int people_size() const;
  void clear_people();
  static const int kPeopleFieldNumber = 1;
  const ::Person& people(int index) const;
  ::Person* mutable_people(int index);
  ::Person* add_people();
  ::google::protobuf::RepeatedPtrField< ::Person >*
      mutable_people();
  const ::google::protobuf::RepeatedPtrField< ::Person >&
      people() const;

  // @@protoc_insertion_point(class_scope:AddrBook)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::Person > people_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_book_2eproto_impl();
  friend void  protobuf_AddDesc_book_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_book_2eproto();
  friend void protobuf_ShutdownFile_book_2eproto();

};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Person

// string name = 1;
inline void Person::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:Person.name)
  return name_.GetNoArena();
}
inline void Person::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Person.name)
}
#if LANG_CXX11
inline void Person::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Person.name)
}
#endif
inline void Person::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Person.name)
}
inline void Person::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Person.name)
}
inline ::std::string* Person::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Person.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_name() {
  // @@protoc_insertion_point(field_release:Person.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Person.name)
}

// int32 id = 2;
inline void Person::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Person::id() const {
  // @@protoc_insertion_point(field_get:Person.id)
  return id_;
}
inline void Person::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:Person.id)
}

// int32 result_per_page = 3;
inline void Person::clear_result_per_page() {
  result_per_page_ = 0;
}
inline ::google::protobuf::int32 Person::result_per_page() const {
  // @@protoc_insertion_point(field_get:Person.result_per_page)
  return result_per_page_;
}
inline void Person::set_result_per_page(::google::protobuf::int32 value) {
  
  result_per_page_ = value;
  // @@protoc_insertion_point(field_set:Person.result_per_page)
}

// .Person.Score score = 4;
inline void Person::clear_score() {
  score_ = 0;
}
inline ::Person_Score Person::score() const {
  // @@protoc_insertion_point(field_get:Person.score)
  return static_cast< ::Person_Score >(score_);
}
inline void Person::set_score(::Person_Score value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:Person.score)
}

// string phone = 5;
inline void Person::clear_phone() {
  phone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Person::phone() const {
  // @@protoc_insertion_point(field_get:Person.phone)
  return phone_.GetNoArena();
}
inline void Person::set_phone(const ::std::string& value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Person.phone)
}
#if LANG_CXX11
inline void Person::set_phone(::std::string&& value) {
  
  phone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Person.phone)
}
#endif
inline void Person::set_phone(const char* value) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Person.phone)
}
inline void Person::set_phone(const char* value, size_t size) {
  
  phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Person.phone)
}
inline ::std::string* Person::mutable_phone() {
  
  // @@protoc_insertion_point(field_mutable:Person.phone)
  return phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Person::release_phone() {
  // @@protoc_insertion_point(field_release:Person.phone)
  
  return phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Person::set_allocated_phone(::std::string* phone) {
  if (phone != NULL) {
    
  } else {
    
  }
  phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  // @@protoc_insertion_point(field_set_allocated:Person.phone)
}

// -------------------------------------------------------------------

// AddrBook

// repeated .Person people = 1;
inline int AddrBook::people_size() const {
  return people_.size();
}
inline void AddrBook::clear_people() {
  people_.Clear();
}
inline const ::Person& AddrBook::people(int index) const {
  // @@protoc_insertion_point(field_get:AddrBook.people)
  return people_.Get(index);
}
inline ::Person* AddrBook::mutable_people(int index) {
  // @@protoc_insertion_point(field_mutable:AddrBook.people)
  return people_.Mutable(index);
}
inline ::Person* AddrBook::add_people() {
  // @@protoc_insertion_point(field_add:AddrBook.people)
  return people_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::Person >*
AddrBook::mutable_people() {
  // @@protoc_insertion_point(field_mutable_list:AddrBook.people)
  return &people_;
}
inline const ::google::protobuf::RepeatedPtrField< ::Person >&
AddrBook::people() const {
  // @@protoc_insertion_point(field_list:AddrBook.people)
  return people_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Person_Score> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Person_Score>() {
  return ::Person_Score_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_book_2eproto__INCLUDED
